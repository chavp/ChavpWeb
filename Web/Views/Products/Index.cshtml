@using Newtonsoft.Json

@{
    ViewBag.Title = "Products";
}

<style>
    .ui-effects-transfer { border: 2px dotted gray; }
</style>

<div id="product-list" class="well well-sm">
    <div class="btn-toolbar">
        <a data-toggle="modal" href="#new-product" class="btn btn-primary" data-bind="click: newProduct">New Product</a>
    </div>
    <div class="table-responsive">
        <table class="table table-condensed table-hover">
            <thead>
                <tr>
                    <th class="col-md-2">CodeName</th>
                    <th class="col-md-2">Brand</th>
                    <th class="col-md-2">Name</th>
                    <th class="col-md-3">Slogan</th>
                    <th class="col-md-1">Status</th>
                    <th class="col-md-2">Actions</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: Products">
                <tr data-bind="attr: { id: getRowID() }">
                    <td><span data-bind="text: CodeName"></span></td>
                    <td><span data-bind="text: Brand"></span></td>
                    <td><span data-bind="text: Name"></span></td>
                    <td><span data-bind="text: Slogan"></span></td>
                    <td><span class="label label-warning" data-bind="text: StatusDisplay"></span></td>
                    <td data-bind="attr: { id: getBtnActionsID() }">
                        <a data-toggle="modal" href="#edit-product" data-bind="click: $parent.edit"><span class="glyphicon glyphicon-edit"></span></a>
                        <a data-bind="click: $parent.remove" href="#remove-product" role="button" data-toggle="modal"><span class="glyphicon glyphicon-remove"></span></a>
                    </td>
                </tr>
            </tbody>
        </table>
        <ul class="pagination pagination-sm">
            <li id="paging-pre"><a data-bind="click: previous" href="#">&laquo;</a></li>
            <!-- ko foreach: Pages -->
                <li data-bind="attr: { 'class': active }"><a data-bind="text: page, click: $parent.loadProducts" href="#"></a></li>
            <!-- /ko -->
            <li id="paging-next"><a data-bind="click: next" href="#">&raquo;</a></li>
        </ul>
    </div>
    
</div>

<div id="new-product" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Product</h4>
            </div>

            <div class="modal-body">
                <form class="form-horizontal" role="form">
                    <div class="form-group">
                        <label for="inputCodeName" class="col-lg-3 control-label">Code Name</label>
                        <div class="col-lg-9">
                            <div class="input-group">
                            <span class="input-group-addon">P-</span>
                            <input data-bind="value: CodeName" type="text" class="form-control active text-uppercase" id="inputCodeName" placeholder="Code Name" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputBrand" class="col-lg-3 control-label">Brand</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Brand" type="text" class="form-control" id="inputBrand" placeholder="Brand" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputName" class="col-lg-3 control-label">Name</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Name" type="text" class="form-control" id="inputName" placeholder="Name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputSlogan" class="col-lg-3 control-label">Slogan</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Slogan" type="text" class="form-control" id="inputSlogan" placeholder="Slogan" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button data-bind="click: add" type="button" class="btn btn-primary" id="btn-new-product" data-loading-text="Adding...">Add</button>
                <button id="btn-close-new-product" type="button" class="btn btn-default" data-dismiss="modal" data-bind="click: close">Close</button>
            </div>
            <div id="new-product-result-message" class="alert" data-bind="text: ResultMessage"></div>
        </div>
    </div>
</div>

<div id="edit-product" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Product</h4>
            </div>

            <div class="modal-body">
                <form class="form-horizontal" role="form">
                    <div class="form-group">
                        <label for="inputCodeName" class="col-lg-3 control-label">Code Name</label>
                        <div class="col-lg-9">
                            <input data-bind="value: CodeName" type="text" class="form-control text-uppercase" id="editCodeName" placeholder="Code Name" disabled/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputBrand" class="col-lg-3 control-label">Brand</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Brand" type="text" class="form-control" id="editBrand" placeholder="Brand" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputName" class="col-lg-3 control-label">Name</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Name" type="text" class="form-control" id="editName" placeholder="Name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputSlogan" class="col-lg-3 control-label">Slogan</label>
                        <div class="col-lg-9">
                            <input data-bind="value: Slogan" type="text" class="form-control" id="editSlogan" placeholder="Slogan" />
                        </div>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button data-bind="click: saveChange" type="button" class="btn btn-primary" id="btn-edit-product" data-loading-text="Saving...">Save Change</button>
                <button id="btn-cancle-edit-product" type="button" class="btn btn-default" data-dismiss="modal" data-bind="click: cancle">Cancle</button>
            </div>

            <div id="edit-product-result-message" class="alert" data-bind="text: ResultMessage"></div>
        </div>
    </div>
</div>

<div id="error-alert" class="modal fade">
    <div class="modal-body">
        <p>Error</p>
    </div>
</div>

@section scripts{
<script>
    $(function () {
        var newProductResultMessage = $('#new-product-result-message');
        var editProductResultMessage = $('#edit-product-result-message');
        var btnNewProduct = $('#btn-new-product');
        var btnCloseProduct = $('#btn-close-new-product');
        var btnEditProduct = $('#btn-edit-product');
        var btnCancleEditProduct = $('#btn-cancle-edit-product');

        var pagingPre = $('#paging-pre');
        var pagingNext = $('#paging-next');

        var $newProductUI = $('#new-product');
        $newProductUI.live('shown.bs.modal', function () {
            $('#inputCodeName').focus();
        });

        var $editProductUI = $('#edit-product');

        newProductResultMessage.hide();

        function Product(data) {
            var self = this;

            self.CodeName = ko.observable();
            self.Brand = ko.observable();
            self.Name = ko.observable();
            self.Slogan = ko.observable();
            self.Status = ko.observable();
            self.StatusDisplay = ko.observable();
            self.ResultMessage = ko.observable();
            self.cache = function () { };
            self.update(data);

            self.getBtnActionsID = function () {
                return "btn-actions-" + self.CodeName();
            }

            self.getRowID = function () {
                return "row-" + self.CodeName();
            }

            self.add = function () {
                if (self.CodeName() === "") {
                    self.alertDangerMessage("Require Code Name!");
                    $('#inputCodeName').focus();
                    return false;
                }
                btnNewProduct.button("loading");
                btnCloseProduct.attr("disabled", "disabled");

                var data = ko.toJS(self);
                data.CodeName = "P-" + data.CodeName.toUpperCase();
                self.addAjax = $.ajax({
                    url: '@Url.Action("Add")',
                    contentType: 'application/json',
                    type: "POST",
                    data: ko.toJSON(data),
                    dataType: 'json',
                    success: function (result) {
                        btnNewProduct.button("reset");
                        btnCloseProduct.removeAttr("disabled", "disabled");
                        if (result.success) {
                            proIndex.addProduct(new Product(result.data));
                            self.ResultMessage(result.message);
                            newProductResultMessage.show();
                            newProductResultMessage.removeClass();
                            newProductResultMessage.addClass("alert alert-success");
                            newProductResultMessage.effect("slide", {}, 300);
                            self.reset();
                            proIndex.getProducts();
                            $('#inputCodeName').focus();
                        } else {
                            self.alertDangerMessage(result.message);
                        }
                    },
                    error: function (request, status, error) {
                        btnNewProduct.button("reset");
                        btnCloseProduct.removeAttr("disabled", "disabled");
                        self.alertDangerMessage(error);
                    }
                });
            }

            self.alertDangerMessage = function (message) {
                self.ResultMessage(message);
                newProductResultMessage.show();
                newProductResultMessage.removeClass();
                newProductResultMessage.addClass("alert alert-danger");
                newProductResultMessage.effect("bounce", {}, 300);
            }

            self.close = function () {
                if (self.addAjax !== undefined) {
                    self.addAjax.abort();
                }
                self.reset();
            }

            self.reset = function () {
                self.CodeName("");
                self.Brand("");
                self.Name("");
                self.Slogan("");
                self.Status("");
            }

            self.cancle = function () {
                self.revert();
                if (self.saveChangeAjax !== undefined) {
                    self.saveChangeAjax.abort();
                }
                $editProductUI.modal('hide');
                btnEditProduct.button("reset");
            }

            self.saveChange = function () {
                btnEditProduct.button("loading");
                btnCancleEditProduct.attr("disabled", "disabled");

                var data = ko.toJS(self);
                self.saveChangeAjax = $.ajax({
                    url: '@Url.Action("Save")',
                    contentType: 'application/json',
                    type: "POST",
                    data: ko.toJSON(data),
                    dataType: 'json',
                    success: function (result) {
                        btnEditProduct.button("reset");
                        btnCancleEditProduct.removeAttr("disabled");

                        if (result.success) {
                            self.commit();
                            self.ResultMessage(result.message);
                            editProductResultMessage.removeClass();
                            editProductResultMessage.addClass("alert alert-success");
                            editProductResultMessage.show();
                            editProductResultMessage.effect("slide", {}, 300);
                        } else {
                            self.ResultMessage(result.message);
                            editProductResultMessage.show();
                            editProductResultMessage.removeClass();
                            editProductResultMessage.addClass("alert alert-danger");
                            editProductResultMessage.effect("bounce", {}, 300);
                        }
                    },
                    error: function (request, status, error) {
                        btnEditProduct.button("reset");
                        btnCancleEditProduct.removeAttr("disabled");

                        self.ResultMessage(error);
                        editProductResultMessage.show();
                        editProductResultMessage.removeClass();
                        editProductResultMessage.addClass("alert alert-danger");
                        editProductResultMessage.effect("bounce", {}, 300);
                    }
                });
            }

            self.remove = function (completed) {
                var codeName = self.CodeName();
                $('#' + self.getBtnActionsID()).hide(100);

                self.removeAjax = $.ajax({
                    url: '@Url.Action("Remove")',
                    contentType: 'application/json',
                    type: "POST",
                    data: ko.toJSON({ codeName: codeName }),
                    dataType: 'json',
                    success: function (result) {
                        if (result.success) {
                            $('#' + self.getRowID()).animate(
                                { opacity: 0 }, 700, function () {
                                    proIndex.Products.remove(self);
                                });

                            //proIndex.Page(1);
                            //proIndex.getProducts();
                            if (completed !== undefined) {
                                completed();
                            }
                        } 
                    },
                    error: function (request, status, error) {
                        $('#' + self.getBtnActionsID()).show();
                        alert(error);
                    }
                });
            }
        }

        ko.utils.extend(Product.prototype, {
            update: function (data) {
                data = data || {};

                this.CodeName(data.CodeName || "");
                this.Brand(data.Brand);
                this.Name(data.Name);
                this.Slogan(data.Slogan);
                this.Status(data.Status);
                this.StatusDisplay(data.StatusDisplay);
                this.ResultMessage(data.ResultMessage);

                //save off the latest data for later use
                this.cache.latestData = data;
            },
            revert: function () {
                this.update(this.cache.latestData);
            },
            commit: function () {
                this.cache.latestData = ko.toJS(this);
            }
        });

        function ProductIndex(data) {
            var self = this;

            self.Page = ko.observable();
            self.TotalPage = ko.observable();
            self.Size = ko.observable();
            self.Products = ko.observableArray();
            self.Pages = ko.observableArray();
            self.Limit = ko.observable();

            self.Start = ko.computed({
                read: function () {
                    return (self.Page() - 1) * self.Limit();
                }
            });

            self.Total = ko.observable();
            self.LastPage = ko.observable();

            self.update(data);

            self.addProduct = function (p) {
                self.Products.push(p);
            }

            self.newProduct = function () {
                newProductResultMessage.hide();

                ko.cleanNode($newProductUI[0]);
                ko.applyBindings(new Product(), $newProductUI[0]);
            }

            self.edit = function (p) {
                editProductResultMessage.hide();
                p.ResultMessage("");
                ko.cleanNode($editProductUI[0]);
                ko.applyBindings(p, $editProductUI[0]);
            }

            self.remove = function (p) {
                p.remove(function () {
                    self.Products.remove(p);
                    if (self.Page() === self.LastPage()) {
                        if (self.Products().length === 0) {
                            self.Page(self.Page() - 1);
                        }
                    }
                    self.getProducts();
                });
            }

            self.getProducts = function () {
                $.ajax({
                    url: '@Url.Action("GetProducts")',
                    contentType: 'application/json',
                    type: "GET",
                    data: { start: self.Start(), limit: self.Limit() },
                    dataType: 'json',
                    success: function (result) {
                        if (result.success) {
                            self.Total(result.total);
                            self.Pages.removeAll();
                            self.Products.removeAll();

                            for (var i = 0; i < result.data.length; i++) {
                                var p = new Product(result.data[i]);
                                self.addProduct(p);
                            }

                            var pageSize = Math.round(self.Total() / self.Limit());
                            if (self.Page() > pageSize) {
                                self.Page(self.Page() - 1);
                            }
                            self.LastPage(pageSize);
                            for (var i = 1; i <= pageSize; i++) {
                                if (i === self.Page()) {
                                    self.Pages.push({ active: "active", page: i, limit: self.Limit() });
                                } else {
                                    self.Pages.push({ active: "", page: i, limit: self.Limit() });
                                }
                            }
                            
                            pagingNext.removeClass("disabled");
                            pagingPre.removeClass("disabled");
                            
                            if (pageSize <= 1) {
                                pagingPre.addClass("disabled");
                                pagingNext.addClass("disabled");
                            } else {
                                if (self.Page() === 1) {
                                    pagingPre.addClass("disabled");
                                } else if (self.LastPage() === self.Page()) {
                                    pagingNext.addClass("disabled");
                                }
                            }
                        }
                    },
                    error: function (request, status, error) {
                        console.log(error);
                    }
                });
            }

            self.loadProducts = function (page) {
                self.Page(page.page);
                self.Limit(page.limit);
                self.getProducts();
            }

            self.previous = function () {
                if (self.Page() === 1) return false;

                self.Page(self.Page() - 1);
                self.getProducts();
            }

            self.next = function () {
                if (self.Page() === self.LastPage()) return false;

                self.Page(self.Page() + 1);
                self.getProducts();
            }
        }

        ko.utils.extend(ProductIndex.prototype, {
            update: function (data) {
                data = data || {};

                this.Page(data.Page || 1);
                this.LastPage(data.LastPage || 1);
                this.Limit(data.Limit || 25);
                this.TotalPage(data.TotalPage || 0);
                this.Size(data.Size || 0);
                this.Products = ko.observableArray(data.Products);
            }
        });

        var proIndex = new ProductIndex({
            Limit: 2
        });
        proIndex.getProducts();

        ko.applyBindings(proIndex, $('#product-list')[0]);

    });
</script>
}
